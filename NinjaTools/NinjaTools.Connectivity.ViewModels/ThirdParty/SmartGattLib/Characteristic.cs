using System;
using System.Collections.Generic;

namespace com.movisens.smartgattlib
{


	public class Characteristic
	{
		public static readonly Guid ALERT_CATEGORY_ID = GattUtils.ToGuid(0x2A43);
		public static readonly Guid ALERT_CATEGORY_ID_BIT_MASK = GattUtils.ToGuid(0x2A42);
		public static readonly Guid ALERT_LEVEL = GattUtils.ToGuid(0x2A06);
		public static readonly Guid ALERT_NOTIFICATION_CONTROL_POINT = GattUtils.ToGuid(0x2A44);
		public static readonly Guid ALERT_STATUS = GattUtils.ToGuid(0x2A3F);
		public static readonly Guid APPEARANCE = GattUtils.ToGuid(0x2A01);
		public static readonly Guid BATTERY_LEVEL = GattUtils.ToGuid(0x2A19);
		public static readonly Guid BLOOD_PRESSURE_FEATURE = GattUtils.ToGuid(0x2A49);
		public static readonly Guid BLOOD_PRESSURE_MEASUREMENT = GattUtils.ToGuid(0x2A35);
		public static readonly Guid BODY_SENSOR_LOCATION = GattUtils.ToGuid(0x2A38);
		public static readonly Guid BOOT_KEYOBARD_INPUT_REPORT = GattUtils.ToGuid(0x2A22);
		public static readonly Guid BOOT_KEYOBARD_OUTPUT_REPORT = GattUtils.ToGuid(0x2A32);
		public static readonly Guid BOOT_MOUSE_INPUT_REPORT = GattUtils.ToGuid(0x2A33);
		public static readonly Guid CSC_FEATURE = GattUtils.ToGuid(0x2A5C);
		public static readonly Guid CSC_MEASUREMENT = GattUtils.ToGuid(0x2A5B);
		public static readonly Guid CURRENT_TIME = GattUtils.ToGuid(0x2A2B);
		public static readonly Guid CYCLING_POWER_CONTROL_POINT = GattUtils.ToGuid(0x2A66);
		public static readonly Guid CYCLING_POWER_FEATURE = GattUtils.ToGuid(0x2A65);
		public static readonly Guid CYCLING_POWER_MEASUREMENT = GattUtils.ToGuid(0x2A63);
		public static readonly Guid CYCLING_POWER_VECTOR = GattUtils.ToGuid(0x2A64);
		public static readonly Guid DATE_TIME = GattUtils.ToGuid(0x2A08);
		public static readonly Guid DAY_DATE_TIME = GattUtils.ToGuid(0x2A0A);
		public static readonly Guid DAY_OF_WEEK = GattUtils.ToGuid(0x2A09);
		public static readonly Guid DEVICE_NAME = GattUtils.ToGuid(0x2A00);
		public static readonly Guid DST_OFFSET = GattUtils.ToGuid(0x2A0D);
		public static readonly Guid EXACT_TIME_256 = GattUtils.ToGuid(0x2A0C);
		public static readonly Guid FIRMWARE_REVISION_STRING = GattUtils.ToGuid(0x2A26);
		public static readonly Guid GLUCOSE_FEATURE = GattUtils.ToGuid(0x2A51);
		public static readonly Guid GLUCOSE_MEASUREMENT = GattUtils.ToGuid(0x2A18);
		public static readonly Guid GLUCOSE_MEASUREMENT_CONTROL = GattUtils.ToGuid(0x2A34);
		public static readonly Guid HARDWARE_REVISION_STRING = GattUtils.ToGuid(0x2A27);
		public static readonly Guid HEART_RATE_CONTROL_POINT = GattUtils.ToGuid(0x2A39);
		public static readonly Guid HEART_RATE_MEASUREMENT = GattUtils.ToGuid(0x2A37);
		public static readonly Guid HID_CONTROL_POINT = GattUtils.ToGuid(0x2A4C);
		public static readonly Guid HID_INFORMATION = GattUtils.ToGuid(0x2A4A);
		public static readonly Guid IEEE11073_20601_REGULATORY_CERTIFICATION_DATA_LIST = GattUtils.ToGuid(0x2A2A);
		public static readonly Guid INTERMEDIATE_CUFF_PRESSURE = GattUtils.ToGuid(0x2A36);
		public static readonly Guid INTERMEDIATE_TEMPERATURE = GattUtils.ToGuid(0x2A1E);
		public static readonly Guid LN_CONTROL_POINT = GattUtils.ToGuid(0x2A6B);
		public static readonly Guid LN_FEATURE = GattUtils.ToGuid(0x2A6A);
		public static readonly Guid LOCAL_TIME_INFORMATION = GattUtils.ToGuid(0x2A0F);
		public static readonly Guid LOCATION_AND_SPEED = GattUtils.ToGuid(0x2A67);
		public static readonly Guid MANUFACTURER_NAME_STRING = GattUtils.ToGuid(0x2A29);
		public static readonly Guid MEASUREMENT_INTERVAL = GattUtils.ToGuid(0x2A21);
		public static readonly Guid MODEL_NUMBER_STRING = GattUtils.ToGuid(0x2A24);
		public static readonly Guid NAVIGATION = GattUtils.ToGuid(0x2A68);
		public static readonly Guid NEW_ALERT = GattUtils.ToGuid(0x2A46);
		public static readonly Guid PERIPERAL_PREFFERED_CONNECTION_PARAMETERS = GattUtils.ToGuid(0x2A04);
		public static readonly Guid PERIPHERAL_PRIVACY_FLAG = GattUtils.ToGuid(0x2A02);
		public static readonly Guid PN_PID = GattUtils.ToGuid(0x2A50);
		public static readonly Guid POSITION_QUALITY = GattUtils.ToGuid(0x2A69);
		public static readonly Guid PROTOCOL_MODE = GattUtils.ToGuid(0x2A4E);
		public static readonly Guid RECONNECTION_ADDRESS = GattUtils.ToGuid(0x2A03);
		public static readonly Guid RECORD_ACCESS_CONTROL_POINT = GattUtils.ToGuid(0x2A52);
		public static readonly Guid REFERENCE_TIME_INFORMATION = GattUtils.ToGuid(0x2A14);
		public static readonly Guid REPORT = GattUtils.ToGuid(0x2A4D);
		public static readonly Guid REPORT_MAP = GattUtils.ToGuid(0x2A4B);
		public static readonly Guid RINGER_CONTROL_POINT = GattUtils.ToGuid(0x2A40);
		public static readonly Guid RINGER_SETTING = GattUtils.ToGuid(0x2A41);
		public static readonly Guid RSC_FEATURE = GattUtils.ToGuid(0x2A54);
		public static readonly Guid RSC_MEASUREMENT = GattUtils.ToGuid(0x2A53);
		public static readonly Guid SC_CONTROL_POINT = GattUtils.ToGuid(0x2A55);
		public static readonly Guid SCAN_INTERVAL_WINDOW = GattUtils.ToGuid(0x2A4F);
		public static readonly Guid SCAN_REFRESH = GattUtils.ToGuid(0x2A31);
		public static readonly Guid SENSOR_LOCATION = GattUtils.ToGuid(0x2A5D);
		public static readonly Guid SERIAL_NUMBER_STRING = GattUtils.ToGuid(0x2A25);
		public static readonly Guid SERVICE_CHANGED = GattUtils.ToGuid(0x2A05);
		public static readonly Guid SOFTWARE_REVISION_STRING = GattUtils.ToGuid(0x2A28);
		public static readonly Guid SUPPORTED_NEW_ALERT_CATEGORY = GattUtils.ToGuid(0x2A47);
		public static readonly Guid SUPPORTED_UNREAD_ALERT_CATEGORY = GattUtils.ToGuid(0x2A48);
		public static readonly Guid SYSTEM_ID = GattUtils.ToGuid(0x2A23);
		public static readonly Guid TEMPERATURE_MEASUREMENT = GattUtils.ToGuid(0x2A1C);
		public static readonly Guid TEMPERATURE_TYPE = GattUtils.ToGuid(0x2A1D);
		public static readonly Guid TIME_ACCURACY = GattUtils.ToGuid(0x2A12);
		public static readonly Guid TIME_SOURCE = GattUtils.ToGuid(0x2A13);
		public static readonly Guid TIME_UPDATE_CONTROL_POINT = GattUtils.ToGuid(0x2A16);
		public static readonly Guid TIME_UPDATE_STATE = GattUtils.ToGuid(0x2A17);
		public static readonly Guid TIME_WITH_DST = GattUtils.ToGuid(0x2A11);
		public static readonly Guid TIME_ZONE = GattUtils.ToGuid(0x2A0E);
		public static readonly Guid TX_POWER_LEVEL = GattUtils.ToGuid(0x2A07);
		public static readonly Guid UNREAD_ALERT_STATUS = GattUtils.ToGuid(0x2A45);
		public static readonly Guid AGGREGATE_INPUT = GattUtils.ToGuid(0x2A5A);
		public static readonly Guid ANALOG_INPUT = GattUtils.ToGuid(0x2A58);
		public static readonly Guid ANALOG_OUTPUT = GattUtils.ToGuid(0x2A59);
		public static readonly Guid DIGITAL_INPUT = GattUtils.ToGuid(0x2A56);
		public static readonly Guid DIGITAL_OUTPUT = GattUtils.ToGuid(0x2A57);
		public static readonly Guid EXACT_TIME_100 = GattUtils.ToGuid(0x2A0B);
		public static readonly Guid NETWORK_AVAILABILITY = GattUtils.ToGuid(0x2A3E);
		public static readonly Guid SCIENTIFIC_TEMPERATURE_IN_CELSIUS = GattUtils.ToGuid(0x2A3C);
		public static readonly Guid SECONDARY_TIME_ZONE = GattUtils.ToGuid(0x2A10);
		public static readonly Guid STRING = GattUtils.ToGuid(0x2A3D);
		public static readonly Guid TEMPERATURE_IN_CELSIUS = GattUtils.ToGuid(0x2A1F);
		public static readonly Guid TEMPERATURE_IN_FAHRENHEIT = GattUtils.ToGuid(0x2A20);
		public static readonly Guid TIME_BROADCAST = GattUtils.ToGuid(0x2A15);
		public static readonly Guid BATTERY_LEVEL_STATE = GattUtils.ToGuid(0x2A1B);
		public static readonly Guid BATTERY_POWER_STATE = GattUtils.ToGuid(0x2A1A);
		public static readonly Guid PULSE_OXIMETRY_CONTINUOUS_MEASUREMENT = GattUtils.ToGuid(0x2A5F);
		public static readonly Guid PULSE_OXIMETRY_CONTROL_POINT = GattUtils.ToGuid(0x2A62);
		public static readonly Guid PULSE_OXIMETRY_FEATURES = GattUtils.ToGuid(0x2A61);
		public static readonly Guid PULSE_OXIMETRY_PULSATILE_EVENT = GattUtils.ToGuid(0x2A60);
		public static readonly Guid PULSE_OXIMETRY_SPOT_CHECK_MEASUREMENT = GattUtils.ToGuid(0x2A5E);
		public static readonly Guid RECORD_ACCESS_CONTROL_POINT_TESTVERSION = GattUtils.ToGuid(0x2A52);
		public static readonly Guid REMOVABLE = GattUtils.ToGuid(0x2A3A);
		public static readonly Guid SERVICE_REQUIRED = GattUtils.ToGuid(0x2A3B);

		private static Dictionary<Guid, string> attributes = new Dictionary<Guid, string>();
		static Characteristic()
		{
			attributes[ALERT_CATEGORY_ID] = "Alert Category ID";
			attributes[ALERT_CATEGORY_ID_BIT_MASK] = "Alert Category ID Bit Mask";
			attributes[ALERT_LEVEL] = "Alert Level";
			attributes[ALERT_NOTIFICATION_CONTROL_POINT] = "Alert Notification Control Point";
			attributes[ALERT_STATUS] = "Alert Status";
			attributes[APPEARANCE] = "Appearance";
			attributes[BATTERY_LEVEL] = "Battery Level";
			attributes[BLOOD_PRESSURE_FEATURE] = "Blood Pressure Feature";
			attributes[BLOOD_PRESSURE_MEASUREMENT] = "Blood Pressure Measurement";
			attributes[BODY_SENSOR_LOCATION] = "Body Sensor Location";
			attributes[BOOT_KEYOBARD_INPUT_REPORT] = "Boot Keyboard Input Report";
			attributes[BOOT_KEYOBARD_OUTPUT_REPORT] = "Boot Keyboard Output Report";
			attributes[BOOT_MOUSE_INPUT_REPORT] = "Boot Mouse Input Report";
			attributes[CSC_FEATURE] = "CSC Feature";
			attributes[CSC_MEASUREMENT] = "CSC Measurement";
			attributes[CURRENT_TIME] = "Current Time";
			attributes[CYCLING_POWER_CONTROL_POINT] = "Cycling Power Control Point";
			attributes[CYCLING_POWER_FEATURE] = "Cycling Power Feature";
			attributes[CYCLING_POWER_MEASUREMENT] = "Cycling Power Measurement";
			attributes[CYCLING_POWER_VECTOR] = "Cycling Power Vector";
			attributes[DATE_TIME] = "Date Time";
			attributes[DAY_DATE_TIME] = "Day Date Time";
			attributes[DAY_OF_WEEK] = "Day of Week";
			attributes[DEVICE_NAME] = "Device Name";
			attributes[DST_OFFSET] = "DST Offset";
			attributes[EXACT_TIME_256] = "Exact Time 256";
			attributes[FIRMWARE_REVISION_STRING] = "Firmware Revision String";
			attributes[GLUCOSE_FEATURE] = "Glucose Feature";
			attributes[GLUCOSE_MEASUREMENT] = "Glucose Measurement";
			attributes[GLUCOSE_MEASUREMENT_CONTROL] = "Glucose Measurement Context";
			attributes[HARDWARE_REVISION_STRING] = "Hardware Revision String";
			attributes[HEART_RATE_CONTROL_POINT] = "Heart Rate Control Point";
			attributes[HEART_RATE_MEASUREMENT] = "Heart Rate Measurement";
			attributes[HID_CONTROL_POINT] = "HID Control Point";
			attributes[HID_INFORMATION] = "HID Information";
			attributes[IEEE11073_20601_REGULATORY_CERTIFICATION_DATA_LIST] = "IEEE 11073-20601 Regulatory Certification Data List";
			attributes[INTERMEDIATE_CUFF_PRESSURE] = "Intermediate Cuff Pressure";
			attributes[INTERMEDIATE_TEMPERATURE] = "Intermediate Temperature";
			attributes[LN_CONTROL_POINT] = "LN Control Point";
			attributes[LN_FEATURE] = "LN Feature";
			attributes[LOCAL_TIME_INFORMATION] = "Local Time Information";
			attributes[LOCATION_AND_SPEED] = "Location and Speed";
			attributes[MANUFACTURER_NAME_STRING] = "Manufacturer Name String";
			attributes[MEASUREMENT_INTERVAL] = "Measurement Interval";
			attributes[MODEL_NUMBER_STRING] = "Model Number String";
			attributes[NAVIGATION] = "Navigation";
			attributes[NEW_ALERT] = "New Alert";
			attributes[PERIPERAL_PREFFERED_CONNECTION_PARAMETERS] = "Peripheral Preferred Connection Parameters";
			attributes[PERIPHERAL_PRIVACY_FLAG] = "Peripheral Privacy Flag";
			attributes[PN_PID] = "PnP ID";
			attributes[POSITION_QUALITY] = "Position Quality";
			attributes[PROTOCOL_MODE] = "Protocol Mode";
			attributes[RECONNECTION_ADDRESS] = "Reconnection Address";
			attributes[RECORD_ACCESS_CONTROL_POINT] = "Record Access Control Point";
			attributes[REFERENCE_TIME_INFORMATION] = "Reference Time Information";
			attributes[REPORT] = "Report";
			attributes[REPORT_MAP] = "Report Map";
			attributes[RINGER_CONTROL_POINT] = "Ringer Control Point";
			attributes[RINGER_SETTING] = "Ringer Setting";
			attributes[RSC_FEATURE] = "RSC Feature";
			attributes[RSC_MEASUREMENT] = "RSC Measurement";
			attributes[SC_CONTROL_POINT] = "SC Control Point";
			attributes[SCAN_INTERVAL_WINDOW] = "Scan Interval Window";
			attributes[SCAN_REFRESH] = "Scan Refresh";
			attributes[SENSOR_LOCATION] = "Sensor Location";
			attributes[SERIAL_NUMBER_STRING] = "Serial Number String";
			attributes[SERVICE_CHANGED] = "Service Changed";
			attributes[SOFTWARE_REVISION_STRING] = "Software Revision String";
			attributes[SUPPORTED_NEW_ALERT_CATEGORY] = "Supported New Alert Category";
			attributes[SUPPORTED_UNREAD_ALERT_CATEGORY] = "Supported Unread Alert Category";
			attributes[SYSTEM_ID] = "System ID";
			attributes[TEMPERATURE_MEASUREMENT] = "Temperature Measurement";
			attributes[TEMPERATURE_TYPE] = "Temperature Type";
			attributes[TIME_ACCURACY] = "Time Accuracy";
			attributes[TIME_SOURCE] = "Time Source";
			attributes[TIME_UPDATE_CONTROL_POINT] = "Time Update Control Point";
			attributes[TIME_UPDATE_STATE] = "Time Update State";
			attributes[TIME_WITH_DST] = "Time with DST";
			attributes[TIME_ZONE] = "Time Zone";
			attributes[TX_POWER_LEVEL] = "Tx Power Level";
			attributes[UNREAD_ALERT_STATUS] = "Unread Alert Status";
			attributes[AGGREGATE_INPUT] = "Aggregate Input";
			attributes[ANALOG_INPUT] = "Analog Input";
			attributes[ANALOG_OUTPUT] = "Analog Output";
			attributes[DIGITAL_INPUT] = "Digital Input";
			attributes[DIGITAL_OUTPUT] = "Digital Output";
			attributes[EXACT_TIME_100] = "Exact Time 100";
			attributes[NETWORK_AVAILABILITY] = "Network Availability";
			attributes[SCIENTIFIC_TEMPERATURE_IN_CELSIUS] = "Scientific Temperature in Celsius";
			attributes[SECONDARY_TIME_ZONE] = "Secondary Time Zone";
			attributes[STRING] = "String";
			attributes[TEMPERATURE_IN_CELSIUS] = "Temperature in Celsius";
			attributes[TEMPERATURE_IN_FAHRENHEIT] = "Temperature in Fahrenheit";
			attributes[TIME_BROADCAST] = "Time Broadcast";
			attributes[BATTERY_LEVEL_STATE] = "Battery Level State";
			attributes[BATTERY_POWER_STATE] = "Battery Power State";
			attributes[PULSE_OXIMETRY_CONTINUOUS_MEASUREMENT] = "Pulse Oximetry Continuous Measurement";
			attributes[PULSE_OXIMETRY_CONTROL_POINT] = "Pulse Oximetry Control Point";
			attributes[PULSE_OXIMETRY_FEATURES] = "Pulse Oximetry Features";
			attributes[PULSE_OXIMETRY_PULSATILE_EVENT] = "Pulse Oximetry Pulsatile Event";
			attributes[PULSE_OXIMETRY_SPOT_CHECK_MEASUREMENT] = "Pulse Oximetry Spot-Check Measurement";
			attributes[RECORD_ACCESS_CONTROL_POINT_TESTVERSION] = "Record Access Control point (Test Version)";
			attributes[REMOVABLE] = "Removable";
			attributes[SERVICE_REQUIRED] = "Service Required";
		}

        public static string GetDescription(Guid guid, string defaultName)
        {
            if (attributes.ContainsKey(guid))
                return attributes[guid];
            return defaultName;
        }
	}
}