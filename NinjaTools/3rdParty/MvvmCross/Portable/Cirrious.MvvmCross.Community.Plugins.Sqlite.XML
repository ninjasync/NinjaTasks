<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Cirrious.MvvmCross.Community.Plugins.Sqlite</name>
    </assembly>
    <members>
        <member name="T:Cirrious.MvvmCross.Community.Plugins.Sqlite.SQLiteConnectionOptions">
            <summary>
            This class is used to provide advanced options for creation of
            a SQLiteConnection.
            </summary>
        </member>
        <member name="M:Cirrious.MvvmCross.Community.Plugins.Sqlite.SQLiteConnectionOptions.#ctor">
            <summary>
            Constructs a SQLiteConnectionOptions with default settings.
            </summary>
        </member>
        <member name="P:Cirrious.MvvmCross.Community.Plugins.Sqlite.SQLiteConnectionOptions.Address">
            <summary>
            The name of the database file.
            </summary>
        </member>
        <member name="P:Cirrious.MvvmCross.Community.Plugins.Sqlite.SQLiteConnectionOptions.BasePath">
            <summary>
            The base path1 to use in conjunction with the Address to create 
            the full location to store the database file.
            </summary>
            <remarks>
            This is used for determining the name of File databases, and the key
            used for distinct in-memory databases. This is not used for temporary
            databases.
            <para>
            Please note that if this value is null it will be set based on best 
            know location based on platform. Only provide this value if you 
            know what you are doing. If this value is left empty it will not 
            be replaced and only the Address will be used.
            </para>
            </remarks>
        </member>
        <member name="P:Cirrious.MvvmCross.Community.Plugins.Sqlite.SQLiteConnectionOptions.StoreDateTimeAsTicks">
            <summary>
            If true will store DateTime properties as ticks; otherwise it
            will not. (Default: true)
            </summary>
            <remarks>
            It is recommended to always set this to true, which the default. 
            This is due to performance advantages as well as an MvvmCross 
            documented issue:
            https://github.com/slodge/MvvmCross/issues/213#issuecomment-24610834
            </remarks>
        </member>
        <member name="P:Cirrious.MvvmCross.Community.Plugins.Sqlite.SQLiteConnectionOptions.Type">
            <summary>
            States which type of database should be created. (Default: File)
            </summary>
        </member>
        <member name="P:Cirrious.MvvmCross.Community.Plugins.Sqlite.SQLiteConnectionOptions.DateTimeFormat">
            <summary>
            Supercedes 'StoreDateTimeAsTicks'. It allows you to specify 'IsoString' allowing
            preservation of time zone information and fractions of seconds while keeping 
            a human readable format.
            </summary>
        </member>
        <member name="T:Cirrious.MvvmCross.Community.Plugins.Sqlite.SQLiteConnectionOptions.DatabaseType">
            <summary>
            Types of databases that can be created.
            </summary>
        </member>
        <member name="F:Cirrious.MvvmCross.Community.Plugins.Sqlite.SQLiteConnectionOptions.DatabaseType.File">
            <summary>
            Specifies a file based database. (Default)
            </summary>
        </member>
        <member name="F:Cirrious.MvvmCross.Community.Plugins.Sqlite.SQLiteConnectionOptions.DatabaseType.InMemory">
            <summary>
            Specifies a pure in-memory database.
            </summary>
        </member>
        <member name="F:Cirrious.MvvmCross.Community.Plugins.Sqlite.SQLiteConnectionOptions.DatabaseType.Temporary">
            <summary>
            Specifies a temporary file based database.
            </summary>
        </member>
        <member name="F:Cirrious.MvvmCross.Community.Plugins.Sqlite.DateTimeFormat.Ticks">
            <summary>
            This is the default. Time zone information is lost.
            </summary>
        </member>
        <member name="F:Cirrious.MvvmCross.Community.Plugins.Sqlite.DateTimeFormat.String">
            <summary>
            This is the legacy mode. Time zone information is lost.
            Not recommended.
            <para/>
            </summary>
        </member>
        <member name="F:Cirrious.MvvmCross.Community.Plugins.Sqlite.DateTimeFormat.IsoString">
            <summary>
            This stores DateTime values as ISO 8601 format, e.g. "2012-03-21T05:40Z"
            This will perserve fractions of seconds and the time zone.
            <para/>
            Uses an optimized parser. When using this string format, DateTime values 
            stored in the 'String' format will also successfully be read from the 
            database (without the performance benefits of the optimized parser).
            </summary>
        </member>
        <member name="M:Cirrious.MvvmCross.Community.Plugins.Sqlite.ISQLiteConnectionFactoryEx.CreateEx(Cirrious.MvvmCross.Community.Plugins.Sqlite.SQLiteConnectionOptions)">
            <summary>
            Creates a SQLite database using the provided options.
            </summary>
            <param name="options">The options to use to create a SQLite connection.</param>
            <returns>A ISQLiteConnection.</returns>
        </member>
        <member name="M:Cirrious.MvvmCross.Community.Plugins.Sqlite.ISQLiteConnectionFactoryEx.CreateEx(System.String,Cirrious.MvvmCross.Community.Plugins.Sqlite.SQLiteConnectionOptions)">
            <summary>
            Creates a SQLite database using the provided path2 and options.
            </summary>
            <param name="address">Address for the database.</param>
            <remarks>The provide path2 will override any provided in the options.</remarks>
            <param name="options">The options to use to create a SQLite connection.</param>
            <returns>A ISQLiteConnection.</returns>
        </member>
        <member name="M:Cirrious.MvvmCross.Community.Plugins.Sqlite.ISQLiteConnectionFactory.Create(System.String)">
            <summary>
            Creates a SQLite database using the provided path2.
            </summary>
            <param name="address">Address for the database.</param>
            <returns>A ISQLiteConnection.</returns>
        </member>
        <member name="M:Cirrious.MvvmCross.Community.Plugins.Sqlite.ISQLiteConnectionFactory.CreateInMemory">
            <summary>
            Creates a in-memory SQLite database.
            </summary>
            <remarks>
            This method will create NO FILES on disk and it will be a new 
            database that exists only in memory. Once the connection is closed
            the database will no longer exist. You can open multiple in memory
            databases and they will each be created as an isolated in-memory 
            databases.
            </remarks>
            <returns>An ISQLiteConnection to a isolated in-memory database.</returns>
        </member>
        <member name="M:Cirrious.MvvmCross.Community.Plugins.Sqlite.ISQLiteConnectionFactory.CreateTemp">
            <summary>
            Creates a new temporary SQLite database.
            </summary>
            <remarks>
            Each call will create a new temporary file based database. Each connection 
            will therefore be to is own temporary database. Once the connection that 
            created it is closed the temporary database will be deleted.
            <para>
            Please note that while a file is created for each temporary database
            that typically it will reside in the in-memory pager cache. This is
            still different from a pure in-memory database created by the Created*InMemory
            methods in that the temporary database may be flushed to the file if
            it becomes to large or if the underlying SQLite engine is placed under 
            memory pressure. This never occurs with the pure in-memory database options.
            </para>
            </remarks>
            <returns>A ISQLiteConnection to a temporary database.</returns>
        </member>
        <member name="M:Cirrious.MvvmCross.Community.Plugins.Sqlite.INxTableQuery`1.Where(System.String)">
            <summary>
            can be used multiple times, all clauses are combined with "AND"
            </summary>
        </member>
        <member name="M:Cirrious.MvvmCross.Community.Plugins.Sqlite.INxTableQuery`1.Where(System.String,System.Object[])">
            <summary>
            can be used multiple times, all clauses are combined with "AND"
            </summary>
        </member>
        <member name="T:Cirrious.MvvmCross.Community.Plugins.Sqlite.ISQLiteConnection">
            <summary>
            Represents an open connection to a SQLite database.
            </summary>
        </member>
        <member name="M:Cirrious.MvvmCross.Community.Plugins.Sqlite.ISQLiteConnection.GetMapping(System.Type,Cirrious.MvvmCross.Community.Plugins.Sqlite.CreateFlags)">
            <summary>
            Retrieves the mapping that is automatically generated for the given type.
            </summary>
            <param name="type">
            The type whose mapping to the database is returned.
            </param>         
            <param name="createFlags">
            Optional flags allowing implicit PK and indexes based on naming conventions
            </param>     
            <returns>
            The mapping represents the schema of the columns of the database and contains 
            methods to set and get properties of objects.
            </returns>
        </member>
        <member name="M:Cirrious.MvvmCross.Community.Plugins.Sqlite.ISQLiteConnection.GetMapping``1">
            <summary>
            Retrieves the mapping that is automatically generated for the given type.
            </summary>
            <returns>
            The mapping represents the schema of the columns of the database and contains 
            methods to set and get properties of objects.
            </returns>
        </member>
        <member name="M:Cirrious.MvvmCross.Community.Plugins.Sqlite.ISQLiteConnection.DropTable``1">
            <summary>
            Executes a "drop table" on the database.  This is non-recoverable.
            </summary>
        </member>
        <member name="M:Cirrious.MvvmCross.Community.Plugins.Sqlite.ISQLiteConnection.CreateTable``1(Cirrious.MvvmCross.Community.Plugins.Sqlite.CreateFlags)">
            <summary>
            Executes a "create table if not exists" on the database. It also
            creates any specified indexes on the columns of the table. It uses
            a schema automatically generated from the specified type. You can
            later access this schema by calling GetMapping.
            </summary>
            <returns>
            The number of entries added to the database schema.
            </returns>
        </member>
        <member name="M:Cirrious.MvvmCross.Community.Plugins.Sqlite.ISQLiteConnection.CreateTable(System.Type,Cirrious.MvvmCross.Community.Plugins.Sqlite.CreateFlags)">
            <summary>
            Executes a "create table if not exists" on the database. It also
            creates any specified indexes on the columns of the table. It uses
            a schema automatically generated from the specified type. You can
            later access this schema by calling GetMapping.
            </summary>
            <param name="ty">Type to reflect to a database table.</param>
            <param name="createFlags">Optional flags allowing implicit PK and indexes based on naming conventions.</param>  
            <returns>
            The number of entries added to the database schema.
            </returns>
        </member>
        <member name="M:Cirrious.MvvmCross.Community.Plugins.Sqlite.ISQLiteConnection.CreateIndex(System.String,System.String,System.String,System.Boolean)">
            <summary>
            Creates an index for the specified table and column.
            </summary>
            <param name="indexName">Name of the index to create</param>
            <param name="tableName">Name of the database table</param>
            <param name="columnName">Name of the column to index</param>
            <param name="unique">Whether the index should be unique</param>
        </member>
        <member name="M:Cirrious.MvvmCross.Community.Plugins.Sqlite.ISQLiteConnection.CreateIndex(System.String,System.String,System.Boolean)">
            <summary>
            Creates an index for the specified table and column.
            </summary>
            <param name="tableName">Name of the database table</param>
            <param name="columnName">Name of the column to index</param>
            <param name="unique">Whether the index should be unique</param>
        </member>
        <member name="M:Cirrious.MvvmCross.Community.Plugins.Sqlite.ISQLiteConnection.CreateIndex``1(System.Linq.Expressions.Expression{System.Func{``0,System.Object}},System.Boolean)">
            <summary>
            Creates an index for the specified object property.
            e.g. CreateIndex&lt;Client&gt;(c => c.Name);
            </summary>
            <typeparam name="T">Type to reflect to a database table.</typeparam>
            <param name="property">Property to index</param>
            <param name="unique">Whether the index should be unique</param>
        </member>
        <member name="M:Cirrious.MvvmCross.Community.Plugins.Sqlite.ISQLiteConnection.CreateCommand(System.String,System.Object[])">
            <summary>
            Creates a new SQLiteCommand given the command text with arguments. Place a '?'
            in the command text for each of the arguments.
            </summary>
            <param name="cmdText">
            The fully escaped SQL.
            </param>
            <param name="ps">
            Arguments to substitute for the occurences of '?' in the command text.
            </param>
            <returns>
            A <see cref="!:SQLiteCommand"/>
            </returns>
        </member>
        <member name="M:Cirrious.MvvmCross.Community.Plugins.Sqlite.ISQLiteConnection.Execute(System.String,System.Object[])">
            <summary>
            Creates a SQLiteCommand given the command text (SQL) with arguments. Place a '?'
            in the command text for each of the arguments and then executes that command.
            Use this method instead of Query when you don't expect rows back. Such cases include
            INSERTs, UPDATEs, and DELETEs.
            You can set the Trace or TimeExecution properties of the connection
            to profile execution.
            </summary>
            <param name="query">
            The fully escaped SQL.
            </param>
            <param name="args">
            Arguments to substitute for the occurences of '?' in the query.
            </param>
            <returns>
            The number of rows modified in the database as a result of this execution.
            </returns>
        </member>
        <member name="M:Cirrious.MvvmCross.Community.Plugins.Sqlite.ISQLiteConnection.Query``1(System.String,System.Object[])">
            <summary>
            Creates a SQLiteCommand given the command text (SQL) with arguments. Place a '?'
            in the command text for each of the arguments and then executes that command.
            It returns each row of the result using the mapping automatically generated for
            the given type.
            </summary>
            <param name="query">
            The fully escaped SQL.
            </param>
            <param name="args">
            Arguments to substitute for the occurences of '?' in the query.
            </param>
            <returns>
            An enumerable with one result for each row returned by the query.
            </returns>
        </member>
        <member name="M:Cirrious.MvvmCross.Community.Plugins.Sqlite.ISQLiteConnection.DeferredQuery``1(System.String,System.Object[])">
            <summary>
            Creates a SQLiteCommand given the command text (SQL) with arguments. Place a '?'
            in the command text for each of the arguments and then executes that command.
            It returns each row of the result using the mapping automatically generated for
            the given type.
            </summary>
            <param name="query">
            The fully escaped SQL.
            </param>
            <param name="args">
            Arguments to substitute for the occurences of '?' in the query.
            </param>
            <returns>
            An enumerable with one result for each row returned by the query.
            The enumerator will call sqlite3_step on each call to MoveNext, so the database
            connection must remain open for the lifetime of the enumerator.
            </returns>
        </member>
        <member name="M:Cirrious.MvvmCross.Community.Plugins.Sqlite.ISQLiteConnection.Query(Cirrious.MvvmCross.Community.Plugins.Sqlite.ITableMapping,System.String,System.Object[])">
            <summary>
            Creates a SQLiteCommand given the command text (SQL) with arguments. Place a '?'
            in the command text for each of the arguments and then executes that command.
            It returns each row of the result using the specified mapping. This function is
            only used by libraries in order to query the database via introspection. It is
            normally not used.
            </summary>
            <param name="map">
            A <see cref="!:TableMapping"/> to use to convert the resulting rows
            into objects.
            </param>
            <param name="query">
            The fully escaped SQL.
            </param>
            <param name="args">
            Arguments to substitute for the occurences of '?' in the query.
            </param>
            <returns>
            An enumerable with one result for each row returned by the query.
            </returns>
        </member>
        <member name="M:Cirrious.MvvmCross.Community.Plugins.Sqlite.ISQLiteConnection.DeferredQuery(Cirrious.MvvmCross.Community.Plugins.Sqlite.ITableMapping,System.String,System.Object[])">
            <summary>
            Creates a SQLiteCommand given the command text (SQL) with arguments. Place a '?'
            in the command text for each of the arguments and then executes that command.
            It returns each row of the result using the specified mapping. This function is
            only used by libraries in order to query the database via introspection. It is
            normally not used.
            </summary>
            <param name="map">
            A <see cref="!:TableMapping"/> to use to convert the resulting rows
            into objects.
            </param>
            <param name="query">
            The fully escaped SQL.
            </param>
            <param name="args">
            Arguments to substitute for the occurences of '?' in the query.
            </param>
            <returns>
            An enumerable with one result for each row returned by the query.
            The enumerator will call sqlite3_step on each call to MoveNext, so the database
            connection must remain open for the lifetime of the enumerator.
            </returns>
        </member>
        <member name="M:Cirrious.MvvmCross.Community.Plugins.Sqlite.ISQLiteConnection.Table``1">
            <summary>
            Returns a queryable interface to the table represented by the given type.
            </summary>
            <returns>
            A queryable object that is able to translate Where, OrderBy, and Take
            queries into native SQL.
            </returns>
        </member>
        <member name="M:Cirrious.MvvmCross.Community.Plugins.Sqlite.ISQLiteConnection.NxTable``1">
            <summary>
            Returns a non-expressions queryable interface to the table 
            represented by the given type.
            </summary>
            <returns>
            A queryable object that is able to translate Where, OrderBy, and Take
            queries into native SQL.
            </returns>
        </member>
        <member name="M:Cirrious.MvvmCross.Community.Plugins.Sqlite.ISQLiteConnection.Get``1(System.Object)">
            <summary>
            Attempts to retrieve an object with the given primary key from the table
            associated with the specified type. Use of this method requires that
            the given type have a designated PrimaryKey (using the PrimaryKeyAttribute).
            </summary>
            <param name="pk">
            The primary key.
            </param>
            <returns>
            The object with the given primary key. Throws a not found exception
            if the object is not found.
            </returns>
        </member>
        <member name="M:Cirrious.MvvmCross.Community.Plugins.Sqlite.ISQLiteConnection.Get``1(System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
            <summary>
            Attempts to retrieve the first object that matches the predicate from the table
            associated with the specified type. 
            </summary>
            <param name="predicate">
            A predicate for which object to find.
            </param>
            <returns>
            The object that matches the given predicate. Throws a not found exception
            if the object is not found.
            </returns>
        </member>
        <member name="M:Cirrious.MvvmCross.Community.Plugins.Sqlite.ISQLiteConnection.Find``1(System.Object)">
            <summary>
            Attempts to retrieve an object with the given primary key from the table
            associated with the specified type. Use of this method requires that
            the given type have a designated PrimaryKey (using the PrimaryKeyAttribute).
            </summary>
            <param name="pk">
            The primary key.
            </param>
            <returns>
            The object with the given primary key or null
            if the object is not found.
            </returns>
        </member>
        <member name="M:Cirrious.MvvmCross.Community.Plugins.Sqlite.ISQLiteConnection.Find(System.Object,Cirrious.MvvmCross.Community.Plugins.Sqlite.ITableMapping)">
            <summary>
            Attempts to retrieve an object with the given primary key from the table
            associated with the specified type. Use of this method requires that
            the given type have a designated PrimaryKey (using the PrimaryKeyAttribute).
            </summary>
            <param name="pk">
            The primary key.
            </param>
            <param name="map">
            The TableMapping used to identify the object type.
            </param>
            <returns>
            The object with the given primary key or null
            if the object is not found.
            </returns>
        </member>
        <member name="M:Cirrious.MvvmCross.Community.Plugins.Sqlite.ISQLiteConnection.Find``1(System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
            <summary>
            Attempts to retrieve the first object that matches the predicate from the table
            associated with the specified type. 
            </summary>
            <param name="predicate">
            A predicate for which object to find.
            </param>
            <returns>
            The object that matches the given predicate or null
            if the object is not found.
            </returns>
        </member>
        <member name="M:Cirrious.MvvmCross.Community.Plugins.Sqlite.ISQLiteConnection.BeginTransaction">
            <summary>
            Begins a new transaction. Call <see cref="M:Cirrious.MvvmCross.Community.Plugins.Sqlite.ISQLiteConnection.Commit"/> to end the transaction.
            </summary>
            <example cref="T:System.InvalidOperationException">Throws if a transaction has already begun.</example>
        </member>
        <member name="M:Cirrious.MvvmCross.Community.Plugins.Sqlite.ISQLiteConnection.SaveTransactionPoint">
            <summary>
            Creates a savepoint in the database at the current point in the transaction timeline.
            Begins a new transaction if one is not in progress.
            
            Call <see cref="M:Cirrious.MvvmCross.Community.Plugins.Sqlite.ISQLiteConnection.RollbackTo(System.String)"/> to undo transactions since the returned savepoint.
            Call <see cref="M:Cirrious.MvvmCross.Community.Plugins.Sqlite.ISQLiteConnection.Release(System.String)"/> to commit transactions after the savepoint returned here.
            Call <see cref="M:Cirrious.MvvmCross.Community.Plugins.Sqlite.ISQLiteConnection.Commit"/> to end the transaction, committing all changes.
            </summary>
            <returns>A string naming the savepoint.</returns>
        </member>
        <member name="M:Cirrious.MvvmCross.Community.Plugins.Sqlite.ISQLiteConnection.Rollback">
            <summary>
            Rolls back the transaction that was begun by <see cref="M:Cirrious.MvvmCross.Community.Plugins.Sqlite.ISQLiteConnection.BeginTransaction"/> or <see cref="M:Cirrious.MvvmCross.Community.Plugins.Sqlite.ISQLiteConnection.SaveTransactionPoint"/>.
            </summary>
        </member>
        <member name="M:Cirrious.MvvmCross.Community.Plugins.Sqlite.ISQLiteConnection.RollbackTo(System.String)">
            <summary>
            Rolls back the savepoint created by <see cref="M:Cirrious.MvvmCross.Community.Plugins.Sqlite.ISQLiteConnection.BeginTransaction"/> or SaveTransactionPoint.
            </summary>
            <param name="savepoint">The name of the savepoint to roll back to, as returned by <see cref="M:Cirrious.MvvmCross.Community.Plugins.Sqlite.ISQLiteConnection.SaveTransactionPoint"/>.  If savepoint is null or empty, this method is equivalent to a call to <see cref="M:Cirrious.MvvmCross.Community.Plugins.Sqlite.ISQLiteConnection.Rollback"/></param>
        </member>
        <member name="M:Cirrious.MvvmCross.Community.Plugins.Sqlite.ISQLiteConnection.Release(System.String)">
            <summary>
            Releases a savepoint returned from <see cref="M:Cirrious.MvvmCross.Community.Plugins.Sqlite.ISQLiteConnection.SaveTransactionPoint"/>.  Releasing a savepoint 
               makes changes since that savepoint permanent if the savepoint began the transaction,
               or otherwise the changes are permanent pending a call to <see cref="M:Cirrious.MvvmCross.Community.Plugins.Sqlite.ISQLiteConnection.Commit"/>.
            
            The RELEASE command is like a COMMIT for a SAVEPOINT.
            </summary>
            <param name="savepoint">The name of the savepoint to release.  The string should be the result of a call to <see cref="M:Cirrious.MvvmCross.Community.Plugins.Sqlite.ISQLiteConnection.SaveTransactionPoint"/></param>
        </member>
        <member name="M:Cirrious.MvvmCross.Community.Plugins.Sqlite.ISQLiteConnection.Commit">
            <summary>
            Commits the transaction that was begun by <see cref="M:Cirrious.MvvmCross.Community.Plugins.Sqlite.ISQLiteConnection.BeginTransaction"/>.
            </summary>
        </member>
        <member name="M:Cirrious.MvvmCross.Community.Plugins.Sqlite.ISQLiteConnection.RunInTransaction(System.Action)">
            <summary>
            Executes <param name="action"/> within a (possibly nested) transaction by wrapping it in a SAVEPOINT. If an
            exception occurs the whole transaction is rolled back, not just the current savepoint. The exception
            is rethrown.
            </summary>
            <param name="action">
            The <see cref="T:System.Action"/> to perform within a transaction. <param name="action"/> can contain any number
            of operations on the connection but should never call <see cref="M:Cirrious.MvvmCross.Community.Plugins.Sqlite.ISQLiteConnection.BeginTransaction"/> or
            <see cref="M:Cirrious.MvvmCross.Community.Plugins.Sqlite.ISQLiteConnection.Commit"/>.
            </param>
        </member>
        <member name="M:Cirrious.MvvmCross.Community.Plugins.Sqlite.ISQLiteConnection.InsertAll(System.Collections.IEnumerable)">
            <summary>
            Inserts all specified objects.
            </summary>
            <param name="objects">
            An <see cref="!:IEnumerable"/> of the objects to insert.
            </param>
            <returns>
            The number of rows added to the table.
            </returns>
        </member>
        <member name="M:Cirrious.MvvmCross.Community.Plugins.Sqlite.ISQLiteConnection.InsertAll(System.Collections.IEnumerable,System.String)">
            <summary>
            Inserts all specified objects.
            </summary>
            <param name="objects">
            An <see cref="!:IEnumerable"/> of the objects to insert.
            </param>
            <param name="extra">
            Literal SQL code that gets placed into the command. INSERT {extra} INTO ...
            </param>
            <returns>
            The number of rows added to the table.
            </returns>
        </member>
        <member name="M:Cirrious.MvvmCross.Community.Plugins.Sqlite.ISQLiteConnection.InsertAll(System.Collections.IEnumerable,System.Type)">
            <summary>
            Inserts all specified objects.
            </summary>
            <param name="objects">
            An <see cref="!:IEnumerable"/> of the objects to insert.
            </param>
            <param name="objType">
            The type of object to insert.
            </param>
            <returns>
            The number of rows added to the table.
            </returns>
        </member>
        <member name="M:Cirrious.MvvmCross.Community.Plugins.Sqlite.ISQLiteConnection.Insert(System.Object)">
            <summary>
            Inserts the given object and retrieves its
            auto incremented primary key if it has one.
            </summary>
            <param name="obj">
            The object to insert.
            </param>
            <returns>
            The number of rows added to the table.
            </returns>
        </member>
        <member name="M:Cirrious.MvvmCross.Community.Plugins.Sqlite.ISQLiteConnection.InsertOrReplace(System.Object)">
            <summary>
            Inserts the given object and retrieves its
            auto incremented primary key if it has one.
            If a UNIQUE constraint violation occurs with
            some pre-existing object, this function deletes
            the old object.
            </summary>
            <param name="obj">
            The object to insert.
            </param>
            <returns>
            The number of rows modified.
            </returns>
        </member>
        <member name="M:Cirrious.MvvmCross.Community.Plugins.Sqlite.ISQLiteConnection.Insert(System.Object,System.Type)">
            <summary>
            Inserts the given object and retrieves its
            auto incremented primary key if it has one.
            </summary>
            <param name="obj">
            The object to insert.
            </param>
            <param name="objType">
            The type of object to insert.
            </param>
            <returns>
            The number of rows added to the table.
            </returns>
        </member>
        <member name="M:Cirrious.MvvmCross.Community.Plugins.Sqlite.ISQLiteConnection.InsertOrReplace(System.Object,System.Type)">
            <summary>
            Inserts the given object and retrieves its
            auto incremented primary key if it has one.
            If a UNIQUE constraint violation occurs with
            some pre-existing object, this function deletes
            the old object.
            </summary>
            <param name="obj">
            The object to insert.
            </param>
            <param name="objType">
            The type of object to insert.
            </param>
            <returns>
            The number of rows modified.
            </returns>
        </member>
        <member name="M:Cirrious.MvvmCross.Community.Plugins.Sqlite.ISQLiteConnection.Insert(System.Object,System.String)">
            <summary>
            Inserts the given object and retrieves its
            auto incremented primary key if it has one.
            </summary>
            <param name="obj">
            The object to insert.
            </param>
            <param name="extra">
            Literal SQL code that gets placed into the command. INSERT {extra} INTO ...
            </param>
            <returns>
            The number of rows added to the table.
            </returns>
        </member>
        <member name="M:Cirrious.MvvmCross.Community.Plugins.Sqlite.ISQLiteConnection.Insert(System.Object,System.String,System.Type)">
            <summary>
            Inserts the given object and retrieves its
            auto incremented primary key if it has one.
            </summary>
            <param name="obj">
            The object to insert.
            </param>
            <param name="extra">
            Literal SQL code that gets placed into the command. INSERT {extra} INTO ...
            </param>
            <param name="objType">
            The type of object to insert.
            </param>
            <returns>
            The number of rows added to the table.
            </returns>
        </member>
        <member name="M:Cirrious.MvvmCross.Community.Plugins.Sqlite.ISQLiteConnection.Update(System.Object)">
            <summary>
            Updates all of the columns of a table using the specified object
            except for its primary key.
            The object is required to have a primary key.
            </summary>
            <param name="obj">
            The object to update. It must have a primary key designated using the PrimaryKeyAttribute.
            </param>
            <returns>
            The number of rows updated.
            </returns>
        </member>
        <member name="M:Cirrious.MvvmCross.Community.Plugins.Sqlite.ISQLiteConnection.Update(System.Object,System.Collections.Generic.ICollection{System.String})">
            <summary>
            Updates the specified columns of a table using the specified object
            except for its primary key.
            The object is required to have a primary key.
            </summary>
            <param name="obj">
            The object to update. It must have a primary key designated using the PrimaryKeyAttribute.
            </param>
            <param name="properties">
            the properties to update.
            </param>
            <returns>
            The number of rows updated.
            </returns>
        </member>
        <member name="M:Cirrious.MvvmCross.Community.Plugins.Sqlite.ISQLiteConnection.Update(System.Object,System.Type)">
            <summary>
            Updates all of the columns of a table using the specified object
            except for its primary key.
            The object is required to have a primary key.
            </summary>
            <param name="obj">
            The object to update. It must have a primary key designated using the PrimaryKeyAttribute.
            </param>
            <param name="objType">
            The type of object to insert.
            </param>
            <returns>
            The number of rows updated.
            </returns>
        </member>
        <member name="M:Cirrious.MvvmCross.Community.Plugins.Sqlite.ISQLiteConnection.UpdateAll(System.Collections.IEnumerable)">
            <summary>
            Updates all specified objects.
            </summary>
            <param name="objects">
            An <see cref="!:IEnumerable"/> of the objects to insert.
            </param>
            <returns>
            The number of rows modified.
            </returns>
        </member>
        <member name="M:Cirrious.MvvmCross.Community.Plugins.Sqlite.ISQLiteConnection.Delete(System.Object)">
            <summary>
            Deletes the given object from the database using its primary key.
            </summary>
            <param name="objectToDelete">
            The object to delete. It must have a primary key designated using the PrimaryKeyAttribute.
            </param>
            <returns>
            The number of rows deleted.
            </returns>
        </member>
        <member name="M:Cirrious.MvvmCross.Community.Plugins.Sqlite.ISQLiteConnection.Delete``1(System.Object)">
            <summary>
            Deletes the object with the specified primary key.
            </summary>
            <param name="primaryKey">
            The primary key of the object to delete.
            </param>
            <returns>
            The number of objects deleted.
            </returns>
            <typeparam name='T'>
            The type of object.
            </typeparam>
        </member>
        <member name="M:Cirrious.MvvmCross.Community.Plugins.Sqlite.ISQLiteConnection.DeleteAll``1">
            <summary>
            Deletes all the objects from the specified table.
            WARNING WARNING: Let me repeat. It deletes ALL the objects from the
            specified table. Do you really want to do that?
            </summary>
            <returns>
            The number of objects deleted.
            </returns>
            <typeparam name='T'>
            The type of objects to delete.
            </typeparam>
        </member>
        <member name="P:Cirrious.MvvmCross.Community.Plugins.Sqlite.ISQLiteConnection.BusyTimeout">
            <summary>
            Sets a busy handler to sleep the specified amount of time when a table is locked.
            The handler will sleep multiple times until a total time of <see cref="P:Cirrious.MvvmCross.Community.Plugins.Sqlite.ISQLiteConnection.BusyTimeout"/> has accumulated.
            </summary>
        </member>
        <member name="P:Cirrious.MvvmCross.Community.Plugins.Sqlite.ISQLiteConnection.IsInTransaction">
            <summary>
            Whether <see cref="M:Cirrious.MvvmCross.Community.Plugins.Sqlite.ISQLiteConnection.BeginTransaction"/> has been called and the database is waiting for a <see cref="M:Cirrious.MvvmCross.Community.Plugins.Sqlite.ISQLiteConnection.Commit"/>.
            </summary>
        </member>
        <member name="T:Cirrious.MvvmCross.Community.Plugins.Sqlite.MvxBaseSQLiteConnectionFactory">
            <summary>
            Base class that each platform specific SQLiteConnectionFactory 
            should extend.
            </summary>
        </member>
        <member name="M:Cirrious.MvvmCross.Community.Plugins.Sqlite.MvxBaseSQLiteConnectionFactory.GetDefaultBasePath">
            <summary>
            Returns the platform specific default base path1.
            </summary>
            <returns>
            Returns default base path.
            </returns>
        </member>
        <member name="M:Cirrious.MvvmCross.Community.Plugins.Sqlite.MvxBaseSQLiteConnectionFactory.LocalPathCombine(System.String,System.String)">
            <summary>
            Combines two strings into a platform specific path1.
            </summary>
            <remarks>
            If one of the specified paths is a zero-length string, 
            this method returns the other path. If <paramref name="path2"/> 
            contains an absolute path, this method returns 
            <paramref name="path2"/>.
            </remarks>
            <param name="path1">The first path1 to combine</param>
            <param name="path2">The second path1 to combine.</param>
            <returns>
            The combined paths.
            </returns>
        </member>
        <member name="M:Cirrious.MvvmCross.Community.Plugins.Sqlite.MvxBaseSQLiteConnectionFactory.CreateSQLiteConnection(System.String,Cirrious.MvvmCross.Community.Plugins.Sqlite.DateTimeFormat)">
            <summary>
            Creates the platform specific SQLiteConnection.
            </summary>
            <param name="databasePath">
                The name of a file that does or will contain the database.
            </param>
            <param name="storeDateTimeAsTicks">
                If true will store DateTime properties as ticks; otherwise it
                will not.
            </param>
            <returns>Returns the interface to a SQLiteConnection.</returns>
        </member>
        <member name="T:Cirrious.MvvmCross.Community.Plugins.Sqlite.Properties.Resources">
            <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="P:Cirrious.MvvmCross.Community.Plugins.Sqlite.Properties.Resources.ResourceManager">
            <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:Cirrious.MvvmCross.Community.Plugins.Sqlite.Properties.Resources.Culture">
            <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
        </member>
        <member name="P:Cirrious.MvvmCross.Community.Plugins.Sqlite.Properties.Resources.CreateDistinctSharedInMemoryInvalidKey">
            <summary>
              Looks up a localized string similar to The key cannot be empty or null string when creating a distinct shared in memory database..
            </summary>
        </member>
        <member name="P:Cirrious.MvvmCross.Community.Plugins.Sqlite.Properties.Resources.CreateFileDbInvalidAddress">
            <summary>
              Looks up a localized string similar to SQLiteConnectionOptions.Address cannot be empty or null string when creating a file database..
            </summary>
        </member>
        <member name="T:Cirrious.MvvmCross.Community.Plugins.Sqlite.SerializedParameter">
            <summary>
            This is a Dot42 specific Attribute
            <para/>
            Specifies that a parameter is used in serialization. Types and objects passed as this 
            parameter will have all their public fields and public and private properties preserved
            and not pruned.
            </summary>
        </member>
    </members>
</doc>
